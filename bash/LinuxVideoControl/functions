
## Библиотека функций для скриптов обработки видеонаблюдения.

# Version 1.0

#### Общие переменные для всех скриптов вынесены в файл конфигурации.

## TODO общие: сделать проверку установлены зависимости (bc, samba)
## Архив - файлы и каталоги, созданные в 2010 году (глюк прошивки камер) надо переименовывать - брать время их модификации и расчитывать исходное


# Подключаем файл конфигурации
. ./scripts.conf


# Запись сообщения в журнал.
log_msg() {
	echo `date +%Y"/"%m"/"%d" "%T`" Скрипт "`basename $0`": $1." >> $camshare$logfile
}


# Создание файла блокировки при запуске скрипта - флага о том что скрипт уже запущен и выполняется.
lock_on() {
    if [ -f $camshare$lockfile ]; then

	# Проверка, есть ли файл блокировки, если да - запись в лог и выход.
	echo `date +%d"/"%m"/"%Y" "%T`" Присутствует файл блокировки, возможно $0 уже запущен? программа завершает работу."
	log_msg "Присутствует файл блокировки, программа завершает работу"
	exit

      else

        # Если файла блокировки нет - создаем его.
	touch $camshare$lockfile
	echo `date +%d"/"%m"/"%Y" "%T`" Создаем файл блокировки"

    fi
}


# Удаление файла блокировки при окончании работы скрипта.
lock_off() {
    if [ -f $camshare$lockfile ]; then

	# Удаляем файл блокировки.
	rm $camshare$lockfile
	echo `date +%d"/"%m"/"%Y" "%T`" Файл блокировки успешно удалён."

      else

	# Выводим сообщение о том, что файла блокировки уже нет.
	echo `date +%d"/"%m"/"%Y" "%T`" Файл блокировки не найден."
    fi
}


# Удаление временного файла после окончания работы скрипта.
clear_tmp() {
    if [ -f $camshare$tmpfile ]; then

	# Удаляем временный файл.
	rm $camshare$tmpfile
	echo `date +%d"/"%m"/"%Y" "%T`" Временный файл $tmpfile удалён."

      else

	# Временный файл не существует.
	echo `date +%d"/"%m"/"%Y" "%T`" Временный файл $tmpfile не найден."
    fi
}


# Монтирование каталога для выгрузки.
upload_share_mount() {

    # Проверка, примонтирован ли каталог для выгрузки.
    test=`mount | grep "$upload_share_path"`
    
    if [ "$?" -eq "0" ] ; then
    
	# Если примонтирован - ничего не делаем.
	echo "Каталог $upload_share_path ужё подключен."
    else

	# Монтируем каталог выгрузки.
	`$share_mount_command $upload_share_name $upload_share_path -o user=$upload_share_user"%"$upload_share_passwd`

	# Проверка результата.
	if [ "$?" -eq "0" ] ; then

		# Проверка закончилась положительно.
		echo "Каталог $upload_share_path только что был успешно подключен."

	    else

		# Запись в журнал об отрицательном результате и выход.
		echo "ОШИБКА: Каталог $upload_share_path не был подключен. Завершение работы."
		log_msg "ОШИБКА: Каталог $upload_share_path не был подключен. Завершение работы."
		exit
	fi
    fi
}

# Отключение примонтированного каталога для выгрузки.
upload_share_umount() {

    # Проверка, подключен ли каталог для выгрузки.
    test=`mount | grep "$upload_share_path"`

    if [  "$?" -eq "0" ] ; then

	# Результат положительный, отключаем.
	`umount "$upload_share_path"`
	echo "Каталог $upload_share_path только что было успешн отдключен."
    else

	# Выводим сообщение, что каталог уже отключен.
	echo "Каталог $upload_share_path уже отключено."
    fi
}
